keys:=[k: k in Keys(CPgenus2list)];
level:=[CPgenus2list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus2list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus2list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus3list)];
level:=[CPgenus3list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus3list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus3list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus4list)];
level:=[CPgenus4list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus4list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus4list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus5list)];
level:=[CPgenus5list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus5list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus5list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus6list)];
level:=[CPgenus6list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus6list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus6list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus7list)];
level:=[CPgenus7list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus7list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus7list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus9list)];
level:=[CPgenus9list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus9list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus9list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus10list)];
level:=[CPgenus10list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus10list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus10list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus11list)];
level:=[CPgenus11list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus11list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus11list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus12list)];
level:=[CPgenus12list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus12list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus12list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus13list)];
level:=[CPgenus13list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus13list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus13list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus14list)];
level:=[CPgenus14list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus14list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus14list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus15list)];
level:=[CPgenus15list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus15list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus15list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus17list)];
level:=[CPgenus17list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus17list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus17list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus18list)];
level:=[CPgenus18list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus18list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus18list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus19list)];
level:=[CPgenus19list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus19list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus19list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus21list)];
level:=[CPgenus21list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
    Gamma:=CPgenus21list[k];	
	N:=Gamma`N;
	SL2:=SL(2,Integers(N));
	Gamma`H:=sub< SL2 | Gamma`gens cat [[-1,0,0,-1]]>;
    CPgenus21list[k] :=Gamma;
end for;

keys:=[k: k in Keys(CPgenus2list)];
level:=[CPgenus2list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus2list[k]`N));
    N:= Normalizer(SL2,CPgenus2list[k]`H);
    N1:=quo<N|CPgenus2list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus2list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus2list[k]`N) mod 2 eq 0 ) and ((CPgenus2list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 256 is the max level here.



keys:=[k: k in Keys(CPgenus3list)];
level:=[CPgenus3list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus3list[k]`N));
    N:= Normalizer(SL2,CPgenus3list[k]`H);
    N1:=quo<N|CPgenus3list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus3list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus3list[k]`N) mod 2 eq 0 ) and ((CPgenus3list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 512 is the max level here.

keys:=[k: k in Keys(CPgenus4list)];
level:=[CPgenus4list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus4list[k]`N));
    N:= Normalizer(SL2,CPgenus4list[k]`H);
    N1:=quo<N|CPgenus4list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus4list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus4list[k]`N) mod 2 eq 0 ) and ((CPgenus4list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 64 is the max level here.

keys:=[k: k in Keys(CPgenus5list)];
level:=[CPgenus5list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus5list[k]`N));
    N:= Normalizer(SL2,CPgenus5list[k]`H);
    N1:=quo<N|CPgenus5list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus5list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus5list[k]`N) mod 2 eq 0 ) and ((CPgenus5list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 512 is the max level here.

keys:=[k: k in Keys(CPgenus6list)];
level:=[CPgenus6list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus6list[k]`N));
    N:= Normalizer(SL2,CPgenus6list[k]`H);
    N1:=quo<N|CPgenus6list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus6list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus6list[k]`N) mod 2 eq 0 ) and ((CPgenus6list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 256 is the max level here.


keys:=[k: k in Keys(CPgenus7list)];
level:=[CPgenus7list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus7list[k]`N));
    N:= Normalizer(SL2,CPgenus7list[k]`H);
    N1:=quo<N|CPgenus7list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus7list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus7list[k]`N) mod 2 eq 0 ) and ((CPgenus7list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 128*8=1024 is the max level here.

keys:=[k: k in Keys(CPgenus9list)];
level:=[CPgenus9list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus9list[k]`N));
    N:= Normalizer(SL2,CPgenus9list[k]`H);
    N1:=quo<N|CPgenus9list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus9list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus9list[k]`N) mod 2 eq 0 ) and ((CPgenus9list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 1024 is the max level here.

keys:=[k: k in Keys(CPgenus10list)];
level:=[CPgenus10list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus10list[k]`N));
    N:= Normalizer(SL2,CPgenus10list[k]`H);
    N1:=quo<N|CPgenus10list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus10list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus10list[k]`N) mod 2 eq 0 ) and ((CPgenus10list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

//64 is the max level here.

keys:=[k: k in Keys(CPgenus11list)];
level:=[CPgenus11list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus11list[k]`N));
    N:= Normalizer(SL2,CPgenus11list[k]`H);
    N1:=quo<N|CPgenus11list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus11list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus11list[k]`N) mod 2 eq 0 ) and ((CPgenus11list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

//128*8=1024 is the max level here.

keys:=[k: k in Keys(CPgenus12list)];
level:=[CPgenus12list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus12list[k]`N));
    N:= Normalizer(SL2,CPgenus12list[k]`H);
    N1:=quo<N|CPgenus12list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus12list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus12list[k]`N) mod 2 eq 0 ) and ((CPgenus12list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 64 is the max level here.

keys:=[k: k in Keys(CPgenus13list)];
level:=[CPgenus13list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus13list[k]`N));
    N:= Normalizer(SL2,CPgenus13list[k]`H);
    N1:=quo<N|CPgenus13list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus13list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus13list[k]`N) mod 2 eq 0 ) and ((CPgenus13list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

//128*16=2048 is the max level here.

keys:=[k: k in Keys(CPgenus14list)];
level:=[CPgenus14list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus14list[k]`N));
    N:= Normalizer(SL2,CPgenus14list[k]`H);
    N1:=quo<N|CPgenus14list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus14list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus14list[k]`N) mod 2 eq 0 ) and ((CPgenus14list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

//128 is the max level here.

keys:=[k: k in Keys(CPgenus15list)];
level:=[CPgenus15list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus15list[k]`N));
    N:= Normalizer(SL2,CPgenus15list[k]`H);
    N1:=quo<N|CPgenus15list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus15list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus15list[k]`N) mod 2 eq 0 ) and ((CPgenus15list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 128*8=1024 is the max level here.

keys:=[k: k in Keys(CPgenus17list)];
level:=[CPgenus17list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus17list[k]`N));
    N:= Normalizer(SL2,CPgenus17list[k]`H);
    N1:=quo<N|CPgenus17list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus17list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus17list[k]`N) mod 2 eq 0 ) and ((CPgenus17list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

// 128*8=1024 is the max level here.

keys:=[k: k in Keys(CPgenus18list)];
level:=[CPgenus18list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus18list[k]`N));
    N:= Normalizer(SL2,CPgenus18list[k]`H);
    N1:=quo<N|CPgenus18list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus18list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus18list[k]`N) mod 2 eq 0 ) and ((CPgenus18list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

keys:=[k: k in Keys(CPgenus19list)];
level:=[CPgenus19list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus19list[k]`N));
    N:= Normalizer(SL2,CPgenus19list[k]`H);
    N1:=quo<N|CPgenus19list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus19list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus19list[k]`N) mod 2 eq 0 ) and ((CPgenus19list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   

keys:=[k: k in Keys(CPgenus21list)];
level:=[CPgenus21list[k]`N:k in keys];
ParallelSort(~level,~keys);
for k in keys do;
SL2:=SL(2,Integers(CPgenus21list[k]`N));
    N:= Normalizer(SL2,CPgenus21list[k]`H);
    N1:=quo<N|CPgenus21list[k]`H>;
    s:=[];
    for n in N1 do;
        x:=0;
        t:=Factorisation(Order(n));
        // checking if for every p|Order(n) does p|CPlist[k]`N
        for p in t do;
            if CPgenus21list[k]`N mod p[1] eq 0 then x:=x+1; end if;
        end for;
        if x eq #t then s:=s cat [Order(n)];end if;
    end for;
    b:=Lcm(s);
    
   
    if ((CPgenus21list[k]`N) mod 2 eq 0 ) and ((CPgenus21list[k]`N) mod 4 ne 0) then
        b:=2*b;
    end if;
    k;b;
    print "...............";
end for;   


